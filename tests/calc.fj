.startup


loop:
    .zero hex_used
    .print 3 prompt_string
    .getch
    .remove_spaces
    .check_quit should_quit before_start
  should_quit:
    .getch
    .remove_spaces
    .line_ended finish finish before_start
  before_start:
    .line_ended loop_new_line finish start
  loop_new_line:
    .output '\n'
    ;loop

  start:
    .insert_number a

    .remove_spaces
    .mov 8 op ascii
    .line_ended do_print do_print advance
  advance:
    .getch

    .remove_spaces
    .insert_number b

    .remove_spaces
    .calc a op b
    .if1 error err_loop

    .zero should_finish
    .line_ended do_print mark_finish error
  mark_finish:
    .not should_finish

  do_print:
    .output '\n'
    .print_int a
    .output '\n'

    .if should_finish loop finish

  err_getch:
    .getch
  err_loop:
    .line_ended print_err print_err err_getch
  print_err:
    .print 8 err_string
    .line_ended loop finish finish

  finish:
    .loop



.def remove_spaces : main_loop try2 next_ascii end
  main_loop:
    .cmp 8 ascii space1 try2 next_ascii try2
  try2:
    .cmp 8 ascii space2 end next_ascii end
  next_ascii:
    .getch
    ;main_loop

  end:
.end



.def insert_number x : check2 before_hex hex_loop before_dec dec_loop end
    .zero w x
    .cmp 8 ascii hex_prefix1 check2   before_hex check2
  check2:
    .cmp 8 ascii hex_prefix2 dec_loop before_hex dec_loop

  before_hex:
    .getch
    .one hex_used
  hex_loop:
    .ascii2hex error hex ascii
    .if1 error end
    .shl w 4 x
    .xor 4 x hex
    .getch
    ;hex_loop

  before_dec:
    .zero w-4 t+4*dw
  dec_loop:
    .ascii2dec error dec ascii
    .if1 error end
    .mov 4 t dec
    .mul10 w x
    .add w x t
    .getch
    ;dec_loop

  end:
    .zero error
.end



.def calc a op b : add try_sub sub bad end
    .zero error

    .cmp 8 op plus  try_sub add try_sub
  try_sub:
    .cmp 8 op minus bad     sub bad
  add:
    .add w a b
    ;end
  sub:
    .sub w a b
    ;end
  bad:
    .one error
  end:
.end



.def line_ended true end false : try_end_line_n
    .if0 8 ascii end
    .cmp 8 ascii end_line_r try_end_line_n true try_end_line_n
  try_end_line_n:
    .cmp 8 ascii end_line_n false true false
.end



.def check_quit true false : try_quit1
    .cmp 8 ascii quit2 try_quit1 true false
  try_quit1:
    .cmp 8 ascii quit1 false true false
.end



// does not print new-line
.def getch : _r check_n do_print end
    .input ascii
    .cmp 8 ascii end_line_r check_n  end check_n
  check_n:
    .cmp 8 ascii end_line_n do_print end do_print
  do_print:
    .print ascii
  end:
.end



.def print_int x : print_hex print_dec end
    .if1 hex_used print_hex
    .print_dec_int w x
    ;end
  print_hex:
    .print_hex_int w x

  end:
.end



op:     .var 8 0
ascii:  .var 8 0
error:  .bit 0
hex:    .var 4 0
dec:    .var 4 0
should_finish:  .bit 0
hex_used:       .bit 0

a:  .var w 0
b:  .var w 0
t:  .var w 0

plus:   .var 8 '+'
minus:  .var 8 '-'

hex_prefix1:.var 8 'x'
hex_prefix2:.var 8 'X'

eof:        .var 8 '\0'
end_line_r: .var 8 '\r'
end_line_n: .var 8 '\n'
space1:     .var 8 ' '
space2:     .var 8 '\t'

quit1:     .var 8 'Q'
quit2:     .var 8 'q'


err_string:     ..string "\nError!\n"
prompt_string:  ..string ">  "

.init_ptr
.stack 20
