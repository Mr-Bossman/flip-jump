startup

// prints
hex.print 16, vars, 0
output '\n'
hex.print 16, vars, 1
output '\n'
output '\n'


// xor
rep (16, val) xor_all val
output '\n'

// zero
hex.zero  16, vars
hex.print 16, vars, 0
output '\n'
output '\n'

// xor (as vec) once again
hex.xor 16, vars, consts
hex.print 16, vars, 0
output '\n'
output '\n'

// xor_zero
hex.xor_zero 16, vars2, vars
hex.print 16, vars, 0
output '\n'
hex.print 16, vars2, 0
output '\n'
output '\n'

// mov
hex.mov 16, vars, vars2
hex.print 16, vars, 0
output '\n'
hex.print 16, vars2, 0
output '\n'
output '\n'

// set
rep(16, i) hex.set vars+i*dw, 15-i
hex.print 16, vars, 0
output '\n'
hex.print 16, vars2, 0
output '\n'
output '\n'

// swap
hex.swap 16, vars, vars2
hex.print 16, vars, 0
output '\n'
hex.print 16, vars2, 0
output '\n'
output '\n'


loop


vars:   rep(16, j) hex j
vars2:  rep(16, j) hex 0
consts: rep(16, j) hex j

def xor_all val < vars, consts {
    rep (16, i) hex.xor vars+i*dw, consts+val*dw
    hex.print 16, vars, 0
    output '\n'
}
