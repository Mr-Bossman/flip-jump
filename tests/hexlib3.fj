start:
startup


// shl
rep(256, i) test_shl 2, i
//rep(256, i) output '='
output '\n'
SHL_NUM = 0x
rep(100, i) test_shl 16, (SHL_NUM>>(64*i))&((1<<64)-1)
//rep(100, i) output '='
output '\n'
output '\n'


// shr
rep(256, i) test_shr 2, i
//rep(256, i) output '='
output '\n'
SHR_NUM = 0x
rep(100, i) test_shr 16, (SHR_NUM>>(64*i))&((1<<64)-1)
//rep(100, i) output '='
output '\n'
output '\n'


// add_count_bits
rep(256, i) test_add_count_bits i&0xf, i>>4
//rep(256, i) output '='
output '\n'

// count_bits
CB_NUM = 0x
rep(100, i) test_count_bits_64 (CB_NUM>>(64*i))&((1<<64)-1)
//rep(100, i) output '='
output '\n'
output '\n'


loop
hex.init


ah: hex.vec 1
bh: hex.vec 2
ch: hex.vec 2
xh: hex.vec 16
count: hex.vec 2

ret: ;0


add_count_bits_2:
    hex.add_count_bits 2, bh, ah
    fret ret

count_bits_64:
    hex.count_bits 16, count, xh
    fret ret



def test_add_count_bits dst, x @ lt, eq, gt, end < ah, bh, ch, add_count_bits_2, ret {
    hex.set ah, x
    hex.set 2, bh, dst
    hex.set 2, ch, dst + ((x>>0)&1) + ((x>>1)&1) + ((x>>2)&1) + ((x>>3)&1)
    fcall add_count_bits_2, ret
    hex.cmp 2, bh, ch, lt, eq, gt

  lt:
    output '<'
    ;end
  eq:
    output '='
    ;end
  gt:
    output '>'
    ;end

  end:
}

def test_count_bits_64 x @ lt, eq, gt, end < xh, count, ch, count_bits_64, ret {
    hex.set 16, xh, x
    hex.set 2, ch, ((x>>0)&1)+((x>>1)&1)+((x>>2)&1)+((x>>3)&1)+((x>>4)&1)+((x>>5)&1)+((x>>6)&1)+((x>>7)&1)+((x>>8)&1)+((x>>9)&1)+((x>>10)&1)+((x>>11)&1)+((x>>12)&1)+((x>>13)&1)+((x>>14)&1)+((x>>15)&1)+((x>>16)&1)+((x>>17)&1)+((x>>18)&1)+((x>>19)&1)+((x>>20)&1)+((x>>21)&1)+((x>>22)&1)+((x>>23)&1)+((x>>24)&1)+((x>>25)&1)+((x>>26)&1)+((x>>27)&1)+((x>>28)&1)+((x>>29)&1)+((x>>30)&1)+((x>>31)&1)+((x>>32)&1)+((x>>33)&1)+((x>>34)&1)+((x>>35)&1)+((x>>36)&1)+((x>>37)&1)+((x>>38)&1)+((x>>39)&1)+((x>>40)&1)+((x>>41)&1)+((x>>42)&1)+((x>>43)&1)+((x>>44)&1)+((x>>45)&1)+((x>>46)&1)+((x>>47)&1)+((x>>48)&1)+((x>>49)&1)+((x>>50)&1)+((x>>51)&1)+((x>>52)&1)+((x>>53)&1)+((x>>54)&1)+((x>>55)&1)+((x>>56)&1)+((x>>57)&1)+((x>>58)&1)+((x>>59)&1)+((x>>60)&1)+((x>>61)&1)+((x>>62)&1)+((x>>63)&1)
    fcall count_bits_64, ret
    hex.cmp 2, count, ch, lt, eq, gt

  lt:
    output '<'
    ;end
  eq:
    output '='
    ;end
  gt:
    output '>'
    ;end

  end:
}


def test_shl n, x @ lt, eq, gt, xh, ch, end {
    hex.shl n, xh
    hex.cmp n, xh, ch, lt, eq, gt

  lt:
    output '<'
    ;end
  eq:
    output '='
    ;end
  gt:
    output '>'
    ;end

  xh: hex.vec n, x
  ch: hex.vec n, (x<<4)&((1<<(4*n))-1)
  end:
}

def test_shr n, x @ lt, eq, gt, xh, ch, end {
    hex.shr n, xh
    hex.cmp n, xh, ch, lt, eq, gt

  lt:
    output '<'
    ;end
  eq:
    output '='
    ;end
  gt:
    output '>'
    ;end

  xh: hex.vec n, x
  ch: hex.vec n, (x>>4)&((1<<(4*n))-1)
  end:
}
