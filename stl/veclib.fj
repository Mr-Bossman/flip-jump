// Every line is (a vector of) bananas!
// Implementation of vector of bit-variables operations

// should be assembled with both bitlib.fjm and (exactly one) libXX.fjm files
// This file is independent of the bit-width, and uses the consts defined at libXX.fjm

// Everything after // is ignored, everything before first : is ignored too, and every whitespace is ignored (besides new line)
// An opcode is:  F;L  F  ;L  or just  ;  (no F => F=temp;  no L => L=next)


// TODO - implement every method 4,8,16,32,64 versions, and then implement pointer dereference (read and write)
// TODO - maybe create a script that will create all the versions?



// ---------- Memory Manipulation:


.def zero n x
    .rep n i zero x+i*dw
.end


.def one n x
    .rep n i one x+i*dw
.end


.def mov n dst src
    .rep n i mov dst+i*dw src+i*dw
.end

.def safe_mov n dst src
    .rep n i safe_mov dst+i*dw src+i*dw
.end



// ---------- Conditional Jump

.def cmp n a b lt eq gt
    .rep n-1 i __cmp_next_eq a+(n-1-i)*dw b+(n-1-i)*dw lt gt
    .cmp a b lt eq gt
.end
.def __cmp_next_eq a b lt gt : eq
    .cmp a b lt eq gt
  eq:
.end



// ---------- Logical Macros:


.def xor n dst src
    .rep n i xor dst+dw*i src+dw*i
.end


.def or n dst src
    .rep n i or dst+dw*i src+dw*i
.end


.def and n dst src
    .rep n i and dst+dw*i src+dw*i
.end


.def not n dst
    .rep n i not dst+dw*i
.end


.def shl n x
    .rep n-1 i mov x+i*dw x+(i+1)*dw
    .zero x+(n-1)*dw
.end


.def shr n x
    .rep n-1 i mov x+(i+1)*dw x+i*dw
    .zero x
.end


.def rol n x
    .mov __veclib_temp_bit x
    .rep n-1 i mov x+i*dw x+(i+1)*dw
    .mov x+(n-1)*dw __veclib_temp_bit
.end


.def ror n x
    .mov __veclib_temp_bit x+(n-1)*dw
    .rep n-1 i mov x+(i+1)*dw x+i*dw
    .mov x __veclib_temp_bit
.end



// ---------- Arithmetical Macros
// carry is both input and output


.def inc n x
    .one __veclib_temp_bit
    .rep n i inc1 x+i*dw __veclib_temp_bit
.end


.def dec n x
    .not n x
    .inc n x
    .not n x
.end


.def neg n x
    .not n x
    .inc n x
.end


.def add n dst src : carry
    .zero __veclib_temp_bit
    .rep n i add1 dst+i*dw src+i*dw __veclib_temp_bit
.end


.def sub n dst src
    .not n src
    .one __veclib_temp_bit
    .rep n i add1 dst+i*dw src+i*dw __veclib_temp_bit
    .not n src
.end
