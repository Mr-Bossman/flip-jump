// Every line is (advanced math) bananas!
// Implementation of advanced math operation over bit-vectors

// should be assembled with both bitlib.fjm and (exactly one) libXX.fjm files
// This file is independent of the bit-width, and uses the consts defined at libXX.fjm

// Everything after // is ignored, everything before first : is ignored too, and every whitespace is ignored (besides new line)
// An opcode is:  F;L  F  ;L  or just  ;  (no F => F=temp;  no L => L=next)



// ---------- Multiply:


// Complexity n(14phi+48)
.def mul10 n x : twice end
    .shl n x
    .mov n twice x
    .shl n 2 x
    .add n x twice
    ;end

    twice:  .var n 0
  end:
.end


//Complexity n^2(13phi+47)
.def mul_loop n dst src : start after_add src_copy res end
    .zero n res
    .mov n src_copy src

  start:
    .if0 src after_add
    .add n res dst
  after_add:
    .shl n dst
    .shr n src
    .if1 n dst start
    ;end

  src_copy: .var n 0
  res: .var n 0
  end:
    .mov n src src_copy
    .mov n dst res
.end


//Complexity n^2(8phi+33)
.def mul n dst src : shifted_src res end
    .zero n res
    .mov n shifted_src+dw*n src
    .rep n i __mul_add_if n dst+i*dw res shifted_src+(n-i)*dw
    .mov n dst res
    ;end

    shifted_src: .var 2*n 0
    res: .var n 0
  end:
.end
.def __mul_add_if n flag dst src: end
    .if0 flag end
    .add n dst src
  end:
.end



// ---------- Divide:



