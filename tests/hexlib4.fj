start:
startup


// mul
ADD_MUL_NUM = 0x13762222597478827273964586609667746261076159906103295246146498313006009027370879739049299768743532028013097420991908184228734231340249470068730930421294852428945780217898559510766158158309746548329620653323558507938254182540256791667112546980649940689889156718247651655686717590906750165209562117497526094265509383796793296027188665539264953913810089258228559353
rep(100, i) test_add_mul (ADD_MUL_NUM>>(3*4*i+8))&0xf, (ADD_MUL_NUM>>(3*4*i+4))&0xf, (ADD_MUL_NUM>>(3*4*i))&0xf
//rep(100, i) output '='
output '\n'
ADD_MUL_64_NUM = 0x
rep(100, i) test_add_mul_64 (ADD_MUL_64_NUM>>((3*i+2)*64))&0xf, (ADD_MUL_64_NUM>>((3*i+1)*64))&0xf, (ADD_MUL_64_NUM>>((3*i)*64))&0xf
//rep(100, i) output '='
output '\n'
MUL_NUM = 0x2437824380132744357025200101109137014950727392786132023039161600854448601549881954496543822664864644527617238186937190192551473319301531171636205861467096172928825132457586189662263656091041331292807214369557127925824201905416709620914915214611308771472657263467510878378164930898699506257387690786790453076772149270917957308038722084021948712277515156640374252105911210281194816299155833285444935261849982982552924658722207120144579611461954388139010421570691354508122146044259181418037002664191299645505985084892665745668578046247831761105184407655204640715547394610604789409872379770533645358408690212428491515673007237918258933829355126524002761133715278747692532615418720884476347848402801993328831792668383601197423710230314182677599364643102107286285049617097458086034505453090946020735586914560056241381275258836214549518196753289436531401252414830240173164958168691562557119285282275330268442070901972696518426264583993778447825076123005337276969832607178590488884864761144929334205895407721292729162099221934700068670096856586505238794164406295434171830594080526985323109350083207276590010487726751092493756987099192862677762162570733258384412094046199742364481100624253240979753063571439555361841855303732934054028971930723609689411454600061867442755741071915854806846072043916740256445681301616329539905264772550936730228276267208692465073478164266116476951053814301379242335470938048736765575045684734711016875733625584118888608972906473863041018408083827145345889801496990161562500547993594518501846414928571802414418203787652036151560469811402659551232431360569726862127031466964116797614530231124875232086259812720785345772970043042029468794557348798866425974981311299895523565469597598539576055841320101893352998778112140121838750514064511005136265788947571940363786603083697874550424997783850405507327828670784996377215201001851730252148818634787942939017085068663092200792931197980882752030979072027482861084
rep(60, i) test_mul 4, mul4, (MUL_NUM>>(32*i))&((1<<16)-1), (MUL_NUM>>(32*i+16))&((1<<16)-1)
rep(40, i) test_mul 8, mul8, (MUL_NUM>>(64*i))&((1<<32)-1), (MUL_NUM>>(64*i+32))&((1<<32)-1)
//rep(100, i) output '='
output '\n'
output '\n'


// TODO - test div
output '\n'
output '\n'


loop
hex.init

ah:  hex.vec 16
bh:  hex.vec 16
res: hex.vec 16
ch:  hex.vec 16

ret: ;0

zero_all_4:
    hex.zero 16, ah
    hex.zero 16, bh
    hex.zero 16, ch
    hex.zero 16, res
    fret ret

mul4:
    hex.mul 4, res, ah, bh
    fret ret

mul8:
    hex.mul 8, res, ah, bh
    fret ret

add_mul:
    hex.mul.clear_carry
    hex.xor hex.mul.dst, bh
    hex.add_mul res, ah
    hex.xor hex.mul.dst, bh
    hex.mul.clear_carry
    fret ret

add_mul_64:
    hex.add_mul 16, res, ah, bh
    fret ret

lt_print:
    output '\n'
    hex.print_as_digit 16, ah, 0
    output '*'
    hex.print_as_digit 16, bh, 0
    output '='
    hex.print_as_digit 16, res, 0
    output '<'
    hex.print_as_digit 16, ch, 0
    output '\n'
    fret ret

gt_print:
    output '\n'
    hex.print_as_digit 16, ah, 0
    output '*'
    hex.print_as_digit 16, bh, 0
    output '='
    hex.print_as_digit 16, res, 0
    output '>'
    hex.print_as_digit 16, ch, 0
    output '\n'
    fret ret

add_mul_lt_print:
    output '\n'
    output_str "old_res+"
    hex.print_as_digit 16, ah, 0
    output '*'
    hex.print_as_digit 16, bh, 0
    output '='
    hex.print_as_digit 16, res, 0
    output '<'
    hex.print_as_digit 16, ch, 0
    output '\n'
    fret ret

add_mul_gt_print:
    output '\n'
    output_str "old_res+"
    hex.print_as_digit 16, ah, 0
    output '*'
    hex.print_as_digit 16, bh, 0
    output '='
    hex.print_as_digit 16, res, 0
    output '>'
    hex.print_as_digit 16, ch, 0
    output '\n'
    fret ret



def test_mul n, mul_label, a, b @ lt, eq, gt,  end < ah, bh, res, ch, ret, lt_print, gt_print {
    hex.set n, ah, a
    hex.set n, bh, b
    hex.set n, ch, (a*b)&((1<<(4*n))-1)
    fcall mul_label, ret
    hex.cmp n, res, ch, lt, eq, gt

  lt:
    fcall lt_print, ret
    ;end
  eq:
    output '='
    ;end
  gt:
    fcall gt_print, ret
    ;end
  end:
}

def test_add_mul r, a, b @ lt, eq, gt,  end < ah, bh, res, ch, ret, add_mul_lt_print, add_mul_gt_print, add_mul {
    hex.set ah,  a
    hex.set bh,  b
    hex.set res, r
    hex.set ch, (r+a*b)&0xf
    fcall add_mul, ret
    hex.cmp res, ch, lt, eq, gt

  lt:
    fcall add_mul_lt_print, ret
    ;end
  eq:
    output '='
    ;end
  gt:
    fcall add_mul_gt_print, ret
    ;end
  end:
}

def test_add_mul_64 r, a, b @ lt, eq, gt,  end < ah, bh, res, ch, ret, add_mul_lt_print, add_mul_gt_print, add_mul_64, zero_all_4 {
    fcall zero_all_4, ret
    hex.xor_by 16, ah,  a
    hex.xor_by 16, bh,  b
    hex.xor_by 16, res, r
    hex.xor_by 16, ch, (r+a*b)&((1<<64)-1)
    fcall add_mul_64, ret
    hex.cmp 16, res, ch, lt, eq, gt

  lt:
    fcall add_mul_lt_print, ret
    ;end
  eq:
    output '='
    ;end
  gt:
    fcall add_mul_gt_print, ret
    ;end
  end:
}
