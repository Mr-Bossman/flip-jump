stl.startup

HexSize = NumSize / 4
Flag = (1<<NumSize)-1
BlockSize = 2*NumSize
rep(Repetitions, i) test_mul_aux HexSize, IsNegative, \
    (Data>>(BlockSize*i))&Flag, \
    (Data>>(BlockSize*i+NumSize))&Flag

stl.loop


hex.init


ah:      hex.vec 16
bh:      hex.vec 16
res:     hex.vec 16
old_res: hex.vec 16
ch:      hex.vec 16

ret: ;0


lt_print:
    stl.output '\n'
    hex.print_uint 16, ah, 1, 0
    stl.output " * "
    hex.print_uint 16, bh, 1, 0
    stl.output " = "
    hex.print_uint 16, res, 1, 0
    stl.output " < "
    hex.print_uint 16, ch, 1, 0
    stl.output '\n'
    stl.fret ret

gt_print:
    stl.output '\n'
    hex.print_uint 16, ah, 1, 0
    stl.output " * "
    hex.print_uint 16, bh, 1, 0
    stl.output " = "
    hex.print_uint 16, res, 1, 0
    stl.output " > "
    hex.print_uint 16, ch, 1, 0
    stl.output '\n'
    stl.fret ret


mul:
    hex.mul HexSize, res, ah, bh
    stl.fret ret


def test_mul_aux n, is_negative, a, b {
    test_mul n,\
            (is_negative & a>=(1<<(NumSize-1))) ? (1<<NumSize)-a : a,\
            (is_negative & b>=(1<<(NumSize-1))) ? (1<<NumSize)-b : b
}


def test_mul n, a, b @ lt, eq, gt,  end < ah, bh, res, ch, ret, lt_print, gt_print, mul {
    hex.set n, ah, a
    hex.set n, bh, b
    hex.set n, ch, (a*b)&((1<<(4*n))-1)
    stl.fcall mul, ret
    hex.cmp n, res, ch, lt, eq, gt

  lt:
    stl.fcall lt_print, ret
    ;end
  eq:
    stl.output "=\n"
    ;end
  gt:
    stl.fcall gt_print, ret
    ;end
  end:
}


end_of_mul:
