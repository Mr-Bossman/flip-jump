stl.startup

HexSize = NumSize / 4
Flag = ((1<<NumSize)-1)
BlockSize = 2*NumSize + 4
rep(Repetitions, i) test_add_mul (Data>>(BlockSize*i))&Flag, (Data>>(BlockSize*i + NumSize))&Flag, (Data>>(BlockSize*i + 2*NumSize))&0xf

stl.loop


hex.init


ah:      hex.vec 16
bh:      hex.vec 16
res:     hex.vec 16
old_res: hex.vec 16
ch:      hex.vec 16

ret: ;0


zero_all_5:
    hex.zero 16, ah
    hex.zero 16, bh
    hex.zero 16, ch
    hex.zero 16, res
    hex.zero 16, old_res
    stl.fret ret

add_mul_lt_print:
    stl.output '\n'
    hex.print_uint 16, old_res, 1, 0
    stl.output " + "
    hex.print_uint 16, ah, 1, 0
    stl.output " * "
    hex.print_uint 16, bh, 1, 0
    stl.output " = "
    hex.print_uint 16, res, 1, 0
    stl.output " < "
    hex.print_uint 16, ch, 1, 0
    stl.output '\n'
    stl.fret ret

add_mul_gt_print:
    stl.output '\n'
    hex.print_uint 16, old_res, 1, 0
    stl.output " + "
    hex.print_uint 16, ah, 1, 0
    stl.output " * "
    hex.print_uint 16, bh, 1, 0
    stl.output " = "
    hex.print_uint 16, res, 1, 0
    stl.output " > "
    hex.print_uint 16, ch, 1, 0
    stl.output '\n'
    stl.fret ret


add_mul:
    hex.add_mul HexSize, res, ah, bh
    stl.fret ret

def test_add_mul r, a, b @ lt, eq, gt,  end < ah, bh, res, old_res, ch, ret, add_mul_lt_print, add_mul_gt_print, add_mul, zero_all_5 {
    stl.fcall zero_all_5, ret
    hex.xor_by HexSize, ah,  a
    hex.xor_by HexSize, bh,  b
    hex.xor_by HexSize, res, r
    hex.xor_by HexSize, old_res, r
    hex.xor_by HexSize, ch, (r+a*b)&Flag
    stl.fcall add_mul, ret
    hex.cmp HexSize, res, ch, lt, eq, gt

  lt:
    stl.fcall add_mul_lt_print, ret
    ;end
  eq:
    stl.output "=\n"
    ;end
  gt:
    stl.fcall add_mul_gt_print, ret
    ;end
  end:
}

