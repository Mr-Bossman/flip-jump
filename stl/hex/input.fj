// ---------- Input Hex


ns hex {
    //  Time Complexity: 2phi+7
    // Space Complexity: 2phi+39
    def input_hex hex @ flip0, flip1, flip2, flip3, end < IO {
        .zero hex
        wflip IO+w, flip0, IO

        pad 8
      flip0:
        IO+dbit+1;IO
        hex+dbit+0;flip0
      flip1:
        IO+dbit+2;IO
        hex+dbit+1;flip1
      flip3:
        wflip IO+w, flip3, end
        hex+dbit+3;flip3
      flip2:
        IO+dbit+1;IO
        hex+dbit+2;flip2
      end:
    }

    //  Time Complexity: 4phi+14
    // Space Complexity: 4phi+70
    def input x {
        .input_hex x
        .input_hex x+dw
    }

    //  Time Complexity: n(4phi+14)
    // Space Complexity: n(4phi+70)
    def input n, x {
        rep(n, i) .input x+2*i*dw
    }


    //  Time Complexity: 6phi+14
    // Space Complexity: 9.5phi+168
    def input_as_hex hex, error @ try_dec, do_dec, do_hex, switch, finish_hex, upper, end {
        .input_hex hex
        .input_hex upper
        .if_flags upper, (1<<4)|(1<<6), try_dec, do_hex
      try_dec:
        .if_flags upper, (1<<3), error, do_dec

      do_dec:
        .if_flags hex, (1<<10)-1, error, end

      do_hex:
        wflip hex+w, switch, hex

      finish_hex:
        hex+dbit+3;
        wflip hex+w, switch, end

        pad 16
      switch:
        wflip hex+w, switch, error  //  0
        hex+dbit+1;switch+2*dw      //  1
        hex+dbit+0;finish_hex       //  2
        hex+dbit+2;switch+1*dw      //  3
        hex+dbit+0;finish_hex       //  4
        hex+dbit+1;switch+2*dw      //  5
        hex+dbit+0;finish_hex       //  6
        ;switch                     //  7
        ;switch
        ;switch
        ;switch
        ;switch
        ;switch
        ;switch
        ;switch
        ;switch

      upper: hex
      end:
    }
}
