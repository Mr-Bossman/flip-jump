def test_shl_bit n, x @ lt, eq, gt, xh, ch, end {
    hex.shl_bit n, xh
    hex.cmp n, xh, ch, lt, eq, gt

  lt:
    stl.output '<'
    ;end
  eq:
    stl.output '='
    ;end
  gt:
    stl.output '>'
    ;end

  xh: hex.vec n, x
  ch: hex.vec n, (x<<1)&((1<<(4*n))-1)
  end:
    stl.output '\n'
}

def test_shr_bit n, x @ lt, eq, gt, xh, ch, end {
    hex.shr_bit n, xh
    hex.cmp n, xh, ch, lt, eq, gt

  lt:
    stl.output '<'
    ;end
  eq:
    stl.output '='
    ;end
  gt:
    stl.output '>'
    ;end

  xh: hex.vec n, x
  ch: hex.vec n, (x>>1)&((1<<(4*n))-1)
  end:
    stl.output '\n'
}


def test_shl_hex n, times, x @ lt, eq, gt, xh, ch, end {
    hex.shl_hex n, times, xh
    hex.cmp n, xh, ch, lt, eq, gt

  lt:
    stl.output '<'
    ;end
  eq:
    stl.output '='
    ;end
  gt:
    stl.output '>'
    ;end

  xh: hex.vec n, x
  ch: hex.vec n, (x<<(4*times)) & ((1<<(4*n))-1)
  end:
    stl.output '\n'
}

def test_shr_hex n, times, x @ lt, eq, gt, xh, ch, end {
    hex.shr_hex n, times, xh
    hex.cmp n, xh, ch, lt, eq, gt

  lt:
    stl.output '<'
    ;end
  eq:
    stl.output '='
    ;end
  gt:
    stl.output '>'
    ;end

  xh: hex.vec n, x
  ch: hex.vec n, (x>>(4*times)) & ((1<<(4*n))-1)
  end:
    stl.output '\n'
}
