// Every line is (Input/Output of) bananas!
// Implementation of single bit-variables operations

// should be assembled with an (exactly one) libXX.fjm file
// This file is independent of the bit-width, and uses the consts defined at libXX.fjm

// Everything after // is ignored, everything before first : is ignored too, and every whitespace is ignored (besides new line)
// An opcode is:  F;L  F  ;L  or just  ;  (no F => F=temp;  no L => L=next)


// TODO - implement pointer dereference (read and write)



// ---------- Input:


.def default_input in0_handler in1_handler : io_handler end
    ..flip_by IO+w io_handler
    ;end
    ..pad 2
  io_handler:
    ;in0_handler
    ;in1_handler
  end:
.end


// Complexity: 2phi+4
.def input_bit dst
    .zero dst
    .xor dst IO
.end


// Complexity: 16phi+32
.def input dst
    .rep 8 i input_bit dst+i*dw
.end


// Complexity: n(16phi+32)
.def input n dst
    .rep n i input dst+8*i*dw
.end



// ---------- Output:



// Complexity: 8
.def output ascii
    .rep 8 i
        IO + ((ascii>>i)&1)
    .end
.end


// Complexity phi+5
.def output_bit x : label_ptr base_jump_label end
    .xor label_ptr x
  label_ptr:
    ;base_jump_label
    ..pad 2
  base_jump_label:
    IO+0;end
    IO+1
    .not label_ptr
  end:
.end


// Complexity 8phi+40
.def print x
    .rep 8 i output_bit x+i*dw
.end


// Complexity n(8phi+40)
.def print n x
    .rep n i print x+8*i*dw
.end


// print string of max size n.
// Complexity min(n, len+1)*(16phi+72)
.def print_str n x : loop
    .rep n i
        .if0 8 x+8*i*dw end
        .print x+8*i*dw
    .end
  end:
.end



// ---------- Casting:


// Complexity 9phi+20
.def bin2ascii ascii bin
    .zero 8 ascii
    .not 2 ascii + 4*dw   // ascii = 0x30
    .xor ascii bin
.end


// Complexity 12phi+26
.def dec2ascii ascii dec
    .zero 8 ascii
    .not 2 ascii + 4*dw   // ascii = 0x30
    .xor 4 ascii dec
.end


// Complexity 25phi+92
.def hex2ascii ascii hex : dec_label hex_label nine4 end
    .zero 8 ascii
    .cmp 4 hex nine4 dec_label dec_label hex_label
  dec_label:
    .xor ascii+3*dw hex+3*dw
    .not 2 ascii + 4*dw   // ascii = 0x30
    ;end
  hex_label:
    .dec 3 hex            // A-F is now 1-6
    .not ascii + 6*dw     // ascii = 0x40
    ;end
  nine4:
    .var 4 9
  end:
    .xor 3 ascii hex
.end
