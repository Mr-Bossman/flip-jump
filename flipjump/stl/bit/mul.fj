ns bit {
    // Complexity n(14@+10)
    //   x[:n] *= 10
    def mul10 n, x @ twice, end {
        .shl n, x
        .mov n, twice, x
        .shl n, 2, x
        .add n, x, twice
        ;end

      twice:
        .vec n
      end:
    }


    // Complexity: n(5@+11)
    //   dst[:n], src[:n] = src[:n] / 10, src[:n] % 10.
    def div10 n, dst, src @ zero, end {
        .zero n, dst
        ._.cmp_sub_10 zero, src+(n-4)*dw, dst+(n-4)*dw
        rep(n-4, i) ._.cmp_sub_10 src+(n-1-i)*dw, src+(n-5-i)*dw, dst+(n-5-i)*dw
        ;end
      zero: .bit 0
      end:
    }
    ns _ {
        // Complexity: 4@+12
        //   if (val > 10) {
        //     val -= 10;
        //     res  = !res;
        //   }
        // for val4:val[3,2,1,0] of length 5, and Assumes val <= 19.
        // This macro is getting called on consecutive 5-bits, shifting the 5-bit-frame 1 bit right at a time.
        def cmp_sub_10 val4, val, res @ yes, no, _1xxxx, _1xx0x, _1xx1x, _01x1x, _0110x {
            ..if1 val4, _1xxxx
            ..if0 val+3*dw, no
            ..if1 val+  dw, _01x1x
            ..if0 val+2*dw, no

          _0110x:
            ..not val+2*dw
            val+3*dw+dbit; yes

          _01x1x:
            val+3*dw+dbit; yes

          _1xxxx:
            ..not val4
            ..if val+dw, _1xx0x, _1xx1x
          _1xx0x:
            val+2*dw+dbit; yes
          _1xx1x:
            val+3*dw+dbit; yes

          yes:
            ..not val+dw
            ..not res
          no:
        }
    }


    // Complexity (b is the number of 1-bits in src):  n^2(6phi+18) + n*b(8phi+33)
    // Space Complexity:  ~O(90n)
    def mul_loop n, dst, src @ start, after_add, src_copy, res, end {
        .zero n, res
        .mov n, src_copy, src

      start:
        .if0 src, after_add
        .add n, res, dst          //Comp: n(8phi+33)
      after_add:
        .shl n, dst               //Comp: n(2phi+5)
        .shr n, src               //Comp: n(2phi+5)
        .if0 n, dst, end          //Comp: n(phi+4)
        .if0 n, src, end          //Comp: n(phi+4)
        ;start

      src_copy:
        .vec n
      res:
        .vec n
      end:
        .mov n, src, src_copy
        .mov n, dst, res
    }


    // Complexity (b is the number of 1-bits in src):  n*b(8phi+33)
    // Space Complexity:  ~O(40n^2)
    def mul n, dst, src @ shifted_src, res, end {
        .zero n, res
        .zero n, shifted_src
        .mov n, shifted_src+dw*n, src
        rep(n, i) _.mul_add_if n, dst+i*dw, res, shifted_src+(n-i)*dw
        .mov n, dst, res
        ;end

      shifted_src:
        .vec 2*n
      res:
        .vec n
      end:
    }
    ns _ {
        def mul_add_if n, flag, dst, src @ end {
            ..if0 flag, end
            ..add n, dst, src
          end:
        }
    }
}
