ADD_MUL_NUM = 0x3787e7d8c45c5eefb8a2cdd909a9e73210d24441f7c8b13aad24166b69780a672ee724faecddc0fbf42163dd4ba0104c191fcbf934fb8b710e1653d28cf6ef0ade0ecc43805d14a15be12649efc47eb45f46906eeaae3b0660c4b978654076f20fcfbbbfb66e660668d4b10fa5584bd2c8743f9a39cdf8634a09a386c755f8deae1b1b560eaf4e07ce39f30c82a59d7d3112077516d1


rep(100, i) test_add_mul (ADD_MUL_NUM>>(3*4*i+8))&0xf, (ADD_MUL_NUM>>(3*4*i+4))&0xf, (ADD_MUL_NUM>>(3*4*i))&0xf

loop


add_mul:
    hex.mul.clear_carry
    hex.xor hex.mul.dst, bh
    hex.add_mul res, ah
    hex.xor hex.mul.dst, bh
    hex.mul.clear_carry
    fret ret

def test_add_mul r, a, b @ lt, eq, gt,  end < ah, bh, res, ch, ret, add_mul_lt_print, add_mul_gt_print, add_mul {
    hex.set ah,  a
    hex.set bh,  b
    hex.set res, r
    hex.set ch, (r+a*b)&0xf
    fcall add_mul, ret
    hex.cmp res, ch, lt, eq, gt

  lt:
    fcall add_mul_lt_print, ret
    ;end
  eq:
    output "=\n"
    ;end
  gt:
    fcall add_mul_gt_print, ret
    ;end
  end:
}

