start:
startup


// mul
output "mul:\n"
ADD_MUL_NUM = 0x3787e7d8c45c5eefb8a2cdd909a9e73210d24441f7c8b13aad24166b69780a672ee724faecddc0fbf42163dd4ba0104c191fcbf934fb8b710e1653d28cf6ef0ade0ecc43805d14a15be12649efc47eb45f46906eeaae3b0660c4b978654076f20fcfbbbfb66e660668d4b10fa5584bd2c8743f9a39cdf8634a09a386c755f8deae1b1b560eaf4e07ce39f30c82a59d7d3112077516d1
rep(100, i) test_add_mul (ADD_MUL_NUM>>(3*4*i+8))&0xf, (ADD_MUL_NUM>>(3*4*i+4))&0xf, (ADD_MUL_NUM>>(3*4*i))&0xf
//rep(100, i) output '='
output '\n'
ADD_MUL_64_NUM = 0xf746c656ec44a883061102a194002cb7f236b436cfd35f291c4e52287d93571f2109d73d25af5f85769e7ab1c1a02ce27b9be8b6577c418a420ca8e10d1ce21eee41a8b0f3f47e1a71a776502d7b0dc8c105b9f577a02afe857fb0235be08f7b4f229c8a382e0f77f025ed9e8eb0fe20e855429737cc9a9586da81814bacadb911967eec2bbc1a1ae3f4c36f88b083c78b1aefd8ec266e2a29579cd1c4a7c505cd8a2532f95580bd810c82aac45cbbbd114639f8b1cc5df54508b9a633ef785589802d083e451e319abe491abd60f51242281d5273ac80272756797db773877bae6bce7f66b835bf8791895d4f730c5a3161eb7703e212b4294ae4acb955883e28de343c314d8884a4e2150c9ec61c907dcb3d93b02e3abed11b82847c854243dc6268ed83fd1e79cd53dd98a5a13f4444f7f9255c21e1e44c8d32b447f7de23df0026601ea1f96caf696434a17f2970b39c044e926e4bf5de735f80f4d4d193520beee647d560031bd114a604040ea9c9ec783abf87812e0fa17555ab43e05806fbcaa5634a3f29cc05d4f41ba0959d779ee6a2b94392dbdade04b7709570f59f3dadf915823175a4fd801b412cbe8842e3b5a52f68733746038df31e3a0afec93a5c581f1e92cbb1d3f0c4d5819dc9724d5dd2e1fdb68b419db2d9f4dcaedf0817f866b6a57e6c7b06ac3698952fa843e8a0cab0275d0e13e5f578a562491689ac73d38b30da550bcdebf02acf8f4a0c5eed955337336e1e0029c79092b4309eda7ddb16d043ac6aa8a5a9a3a228c3b908ad14cf2a60d1a5323e9d68f5efbae7c43a362be57f8634887a5b8ede3e72527e06fd20ed39f97f666a7c2933df4617176902453181bc5edec13ca451ee74d4f434c8dd01e9f4a11ad2f1944dd63b74c648305ebc95e25b03789b8725132621d2d001fd079c0d1ed9b2044c8e3f52fa65566edbc726f0791b49a7117078955c925889294845a2b7c793f68e7e833593c2f60cf59f2b4a634733b392e7170a70853b4d6c398c107da1ce5613a03361142d7c213972cab3a92631c034cc2c620fb74286100736617003311b12c5792c60f8d5f9a58940acd42f8c541be45631f7fc70f9a23a0ca8c3adb1443fc035588709bbc83297f6a368788e6328d4f085bb0b301e11da115ac24523f8232cf2b91fb8d78d3b98f9453cbff751f6148b7de63198648de8c7857fa98853d53f11138c4d327a6a53c2cf6c1554c7005e3ad52aed8eeb4bd0cd2af9b3770313a4d12c350eaa2cff67cc2951f4064fcf54ba3f5fa9c2e45543a64a591a34199f2ed80ca59446860fca6fa6335cf01c7c9cc5d719eb45bdf771007e5a5f34d4e7aecbf682d8f70a1f2658580cbc0bb1edd6b8c7098447d1d0e0e1c1ef53523c8722f9a78d9fdea511ebc935e518a0c40dced8f165ef96ad6ac1f2046152ea1932a70a10d3789eef64ded47da94d3726e9616564e522aaa16182af62807c7c97de481b3fe374d7183b9823b74412f0e4a312e6f5d3bac6d315caf52ab41a026234d04d3d190576b8ddf3c76287479141e019ccdda140c36d5bacfcc8273c5993f8527587a3ff624be4ee4a271948470cb797231aa104bb790074cff31761f016bc6946838d4c9d312c920a69c2d5885d25ff237dfbc9a31cf41b75c681ad0348d37cf9e820442da8e1ba2a32bca08bc1deb388164579d99eda40faeac64ede15ed8dfe225183fe03f5ed518d459fd1d6fe6262b385962af779013bbff4bc20307cca4045ef760246a2d5b9cc9b788ded073172e7875dd6a6217043f503b42e97250a1aa5d44433f253752e1c2b1d338bc1c2ec42d2f62a12896ba28d08ecd1a67c7902c354d8c2f39f28f96fadc93e4fff2859cc241d60245b8fd3242e705d0c81d7e11124f1df87ff57c9017899abab7ac3a5bf65830b160d9555ab3d44dc38d427bce2fbcb457c5a836186de2920ac6b2cb1066e51c37e8c839be63fa49430d76a7282b957a200aff5e7cd5fd79546236be19455f7b16f43fdd672b1c65e2851c44232fce9b18ce2dd9eb6fd6d88bb03750dad2d2a7ad3ac4c39db10c4f1a8c385551269de99b53cdf04cd24f2077ee7a5e21615e38e90eab0ea2e66cc6ad52965157a7f0f4274f47ce81f3c68647c1142518e9264b7a175ffe5adbe1e02413049a3d4447ad08f28dcf67b3cd5850e709f67f6f82ea071f3a04c959d5c25f7bd5f1d7c3f1cb9cea9688af1550dbea94c9f6694137cdc7c4bcb79cdcd7f3b98f4d8c32d2a080dd2b124e2436c7ff70337e207c6916ef61b1592a4c30b5bafd2b52c996cbb691792059c63047c829e581b575b7162f7b749217733e57831f17d3ecee9301b5a7d6f399c28c946b070771f5250df01b962071380a32ef8156c624171eba854078c963fa87cd051c67e68709bf9cbf2f4513b89ddc36a062e00a3862732da4e5f385fb9dc978f377adeec1e4598dfd980423d55819bef8b319aa0198eb7a9343d2e3e92309bd1ea1757c074c3457a09897bc11c045842b1e0593d276cc4b0a000c89faa510462e441a0c9acd4e650672be2de11112264b306c4e3eee63573da11922c365a8b7d75f0b8addbbad956d452449123c90d24a773ff4d187f18f75bbd85b04a6c6473d044d7dd589c8dd3a220d757388143cbbd9542d3063a682e68898fb5935c915de056a156d34d198923a948f0838aa678a948b04e0e2c10193fe9348f184cad5d98c3e21461943fdf6c7ca406c6384c4dd0b1ed557b05425ffa1e5ff79411cccbdbc605ceda4b4ba6c118349a5a0013d05b2ca2f9e78565dced2be96650258cc700960f713977db16bf106b150fb775519d08f608fab92306c6b170554f47d6f42bf1f8486f9d31684493771b3aa6d43038f790352728383b65e6f9999a2b813f181b4d320005611988683b79aa0b916cca71259632c5678678ef2815ee04daa6de497a75bbbde002fe52cc688f7d5a528214699a63775544ecf7d8460f63ef6850906adac1d4453d088eb56549a36ad96fe6d3dd125821f868fd7773391f5b47b579040663b3a3627128c589ef07daf7052f0b7119bf9c773758693456885bf25523489cb94f6edefe6f303ca68aa1b71d856a5a23b949b89db4051e3d0e819d5413649ac57707450a9c6b1c552b7086d0d97e7a6afc78ef7567d2afe8181827233dd39ed739b6ac300dd4a782f6b38d3a627586fa6d4029d4ef3bee4de0d96529c44c49558c4f2f26bd1784fca4f9c1e58654b6d5246c63e803f80e25d7f8a1888e44c6682f5c468ce155d03ee97901262893db516213e95666e5de5c98193dc773aa18b003797b1a63ea5076308153eb88f5544d46d4c99d928e7256f517b4fa3625912f3ea82f09d3cd625f0426bef9237334d1955714
rep(100, i) test_add_mul_64 (ADD_MUL_64_NUM>>((3*i+2)*64))&0xf, (ADD_MUL_64_NUM>>((3*i+1)*64))&0xf, (ADD_MUL_64_NUM>>((3*i)*64))&0xf
//rep(100, i) output '='
output '\n'
MUL_NUM = 0xeff9afd3e398b0d9480e36c3d14cd6289b2042fa927030786e10e3078377a5e6c06b831c58e89ff13510f0f76f49bb44a8894cf670e676320ad8cec17d41b2763e28bd1c86d45633dedb228e1ce35c5000886f24c35cf8dc58a13818ca057c40e0471c46792b0f3cd9754e0a5d6cf4257d70f75835a56d75d8d6be13e0388f0f3e7f0efe0b6dfff1bde6e74b2f9097544b212fd77e0ea23486d9b37688dc518bd958302327d450e980ff6bf8c330250d4d38a56aa8d447add3ba947d8b50372efbfe0b688f1e693b02f667ae7dd7d3dc7ccbd78d1b170b361f80b2cd702750496de21c98ef8282cf27e014e22d236001ea346ccac2fd760d619c0c86bf2ce55509a780c7fce9bb5d87770724eb43e471989724c7aff112eec5dd184b20467942e8f78b51ff652ff216ba1efd0e0a42eece85864202c6f604ce898fbca66b5e989309b5c30a424a878c8f7a826f6ae8e50df64b548c086fbcc829178ab9440718be0a3c367631f19d933e2dfe966d35f58098bf4bcec254d48de67822157bf2ec93e98841172701565fc1e01e02d3bda981b22ede8f3068fd01085504f5b538727d88b72eecca5c479ac1454f73973457302720b1a8ff05c67b744e93432833839be8f4ebe558a703aa654e69e23581168f80f49de3f7713d4895f88ae593f1000f4e287efb383f4e1dba1ffde820edabf8589059d9b297290cc3a1e4d3cbc548e95a36808dd8113d25edf03e1e59abcd5c69e5ab14e5bc542061f04d69178ea7fd74e5208dd0e1fa1d3990097f8c50b6f16910008b72979c6068b5bf538fd4338cf50cd3cebf09f6fe42e2177700c7379dae6339c7347808c7ce44dabb5ab6c60dec9e7b37b88f01117dc3b40f5f1923fc5fc41b47a9614cc37dca81c1e5964271047ea0c2468b11e3653051ba153f2802b6441d8f9f5d4e07dcdf1dfc49d83a02a4b3ad0bcb55f62c4d825759509336e5ae2503a350eec5641f210681d76a4552e1ae32cf8dd1e2c1dd000f713a6ad98996528a9b21858623561004ecd77965e03665c0de5a3027d39a856796b3591d07bc3bf87ab126ef7d3a1080d8aafce1d28adc9bda23efa7c05915f4b8629dd1558f89d7f771d8f5589bd8e8193e0a5e
rep(60, i) test_mul 4, mul4, (MUL_NUM>>(32*i))&((1<<16)-1), (MUL_NUM>>(32*i+16))&((1<<16)-1)
rep(40, i) test_mul 8, mul8, (MUL_NUM>>(64*i))&((1<<32)-1), (MUL_NUM>>(64*i+32))&((1<<32)-1)
//rep(100, i) output '='
output "\n\n"


// TODO - test div
output "div:\n"
output "\n\n"


loop
hex.init


ah:  hex.vec 16
bh:  hex.vec 16
res: hex.vec 16
ch:  hex.vec 16


ret: ;0

zero_all_4:
    hex.zero 16, ah
    hex.zero 16, bh
    hex.zero 16, ch
    hex.zero 16, res
    fret ret

mul4:
    hex.mul 4, res, ah, bh
    fret ret

mul8:
    hex.mul 8, res, ah, bh
    fret ret

add_mul:
    hex.mul.clear_carry
    hex.xor hex.mul.dst, bh
    hex.add_mul res, ah
    hex.xor hex.mul.dst, bh
    hex.mul.clear_carry
    fret ret

add_mul_64:
    hex.add_mul 16, res, ah, bh
    fret ret

lt_print:
    output '\n'
    hex.print_uint 16, ah, 1, 0
    output '*'
    hex.print_uint 16, bh, 1, 0
    output '='
    hex.print_uint 16, res, 1, 0
    output '<'
    hex.print_uint 16, ch, 1, 0
    output '\n'
    fret ret

gt_print:
    output '\n'
    hex.print_uint 16, ah, 1, 0
    output '*'
    hex.print_uint 16, bh, 1, 0
    output '='
    hex.print_uint 16, res, 1, 0
    output '>'
    hex.print_uint 16, ch, 1, 0
    output '\n'
    fret ret

add_mul_lt_print:
    output '\n'
    output "old_res+"
    hex.print_uint 16, ah, 1, 0
    output '*'
    hex.print_uint 16, bh, 1, 0
    output '='
    hex.print_uint 16, res, 1, 0
    output '<'
    hex.print_uint 16, ch, 1, 0
    output '\n'
    fret ret

add_mul_gt_print:
    output '\n'
    output "old_res+"
    hex.print_uint 16, ah, 1, 0
    output '*'
    hex.print_uint 16, bh, 1, 0
    output '='
    hex.print_uint 16, res, 1, 0
    output '>'
    hex.print_uint 16, ch, 1, 0
    output '\n'
    fret ret


def test_mul n, mul_label, a, b @ lt, eq, gt,  end < ah, bh, res, ch, ret, lt_print, gt_print {
    hex.set n, ah, a
    hex.set n, bh, b
    hex.set n, ch, (a*b)&((1<<(4*n))-1)
    fcall mul_label, ret
    hex.cmp n, res, ch, lt, eq, gt

  lt:
    fcall lt_print, ret
    ;end
  eq:
    output '='
    ;end
  gt:
    fcall gt_print, ret
    ;end
  end:
}

def test_add_mul r, a, b @ lt, eq, gt,  end < ah, bh, res, ch, ret, add_mul_lt_print, add_mul_gt_print, add_mul {
    hex.set ah,  a
    hex.set bh,  b
    hex.set res, r
    hex.set ch, (r+a*b)&0xf
    fcall add_mul, ret
    hex.cmp res, ch, lt, eq, gt

  lt:
    fcall add_mul_lt_print, ret
    ;end
  eq:
    output '='
    ;end
  gt:
    fcall add_mul_gt_print, ret
    ;end
  end:
}

def test_add_mul_64 r, a, b @ lt, eq, gt,  end < ah, bh, res, ch, ret, add_mul_lt_print, add_mul_gt_print, add_mul_64, zero_all_4 {
    fcall zero_all_4, ret
    hex.xor_by 16, ah,  a
    hex.xor_by 16, bh,  b
    hex.xor_by 16, res, r
    hex.xor_by 16, ch, (r+a*b)&((1<<64)-1)
    fcall add_mul_64, ret
    hex.cmp 16, res, ch, lt, eq, gt

  lt:
    fcall add_mul_lt_print, ret
    ;end
  eq:
    output '='
    ;end
  gt:
    fcall add_mul_gt_print, ret
    ;end
  end:
}
